#!/usr/bin/env perl

use strict;
use warnings;
use utf8;

use Errno qw(EINTR);
use Fcntl qw(O_RDONLY);
use List::Util qw(pairs);
use Time::HiRes qw(clock_gettime CLOCK_MONOTONIC alarm);

# apt install libterm-readkey-perl on Debian derivatives eg Ubuntu
use Term::ReadKey ();

# We need to turn off buffering of STDERR to get rapid display of progress.
STDERR->autoflush(1);
binmode(STDERR, ":encoding(UTF-8)");

# Set transfer blocksize to 512KiB. This doesn't appear to affect transfer rate MUCH, at least on my
# (i9-12900K) system. But it does appear SLIGHTLY faster, at least for the inital couple of seconds,
# than using 64KiB.
my $blocksize = 1024 * 512;

if (scalar(@ARGV) % 2 != 0) {
	die "Usage: $0 SOURCE DEST [..]";
}

my $cursorup = "\033[1A";
my $cursordown = "\033[1B";
my $beginline = "\033[1E";
my $cleartoend = "\033[K";
my $clearline = $cursorup . $beginline . $cleartoend;

my $progress = Progress->new();
my $output = Output->new();

for my $pair (pairs @ARGV) {
	my ($source, $target) = @$pair;
	my $size = file_size($source);

	$progress->add_file($size);
}

for my $pair (pairs @ARGV) {
	my ($source, $target) = @$pair;

	$progress->next_file() || die "BUG: Progress and args out of sync";
	transfer_data($source, $target, $progress, $output);
}

exit 0;

sub monotime {
	clock_gettime(CLOCK_MONOTONIC)
}

sub transfer_data {
	my $source = shift;
	my $target = shift;
	my $progress = shift;
	my $output = shift;

	my ($in, $out) = open_files($source, $target);

	my $finished = 0;
	my $alarmed = 0;

	# Set up a SIGALRM timer to interrupt us periodically to update statistics
	local $SIG{'ALRM'} = sub {
		$alarmed = 1;
	};

	alarm(0.5, 0.5);

	# Number of bytes from the previous read, 0 at EOF, or -1 on SIGALRM interrupt
	my $bytes_read = -1;

	# Total bytes read since the last progress update
	my $current_bytes_read = 0;

	# Bytes in buffer remaining to write
	my $buffer_pending_bytes = 0;
	my $buffer;

	# Loop until we have both exhausted the input and cleared the output buffer
	until ($finished) {
		# Try reading if the buffer is empty and we haven't previously hit EOF
		if ($buffer_pending_bytes == 0 && $bytes_read != 0) {
			# Try to refill our empty buffer
			$buffer = '';
			$bytes_read = sysread($in, $buffer, $blocksize);

			if (defined($bytes_read)) {
				$current_bytes_read += $bytes_read;
				$buffer_pending_bytes = $bytes_read;
			} elsif ($! == EINTR) {
				$bytes_read = -1;
			} else {
				die "Error reading from $source: $!";
			}
		}

		if ($buffer_pending_bytes != 0) {
			# Try to drain the non-empty buffer
			my $bytes_written = syswrite($out, $buffer, $buffer_pending_bytes,
				length($buffer) - $buffer_pending_bytes);

			if (defined($bytes_written)) {
				$buffer_pending_bytes -= $bytes_written;
			} elsif ($! != EINTR) {
				die $! ? "Error writing to $target: $!" : "Exit status $? from $target";
			}
		}

		$finished = $bytes_read == 0 && $buffer_pending_bytes == 0;

		# Record stats if we've received SIGALRM or have hit EOF and finished writing
		if ($alarmed || $finished) {
			$progress->update_stats($current_bytes_read - $buffer_pending_bytes);
			$output->print_progress($progress);

			$alarmed = 0;
			$current_bytes_read = 0;
		}
	}
	alarm(0);
	close_files($source, $target, $in, $out);
}

sub open_files {
	my $source = shift;
	my $target = shift;

	# Seems a bit arbitrary to sysopen one and open the other?
	# I don't think it matters either way
	sysopen my $in, $source, O_RDONLY
		or die $! ? "Error opening source file $source: $!"
		: "Exit status $? from sysopen SOURCE,$source,O_RDONLY\n";
	binmode $in;

	open my $out, ">", "$target"
		or die $! ? "Error opening target file $target: $!"
		: "Exit status $? from open TARGET,>,$target\n";
	binmode $out;

	return ($in, $out);
}

sub close_files {
	my $source = shift;
	my $target = shift;
	my $in = shift;
	my $out = shift;

	# Errors from writing are more likely, but also more critical, so close that first
	close $out
		or die $! ? "Error closing target file $target: $!"
		: "Exit status $? from $target\n";

	close $in
		or die $! ? "Error closing source file $source: $!"
		: "Exit status $? from $source\n";
}

sub file_size {
	my $path = shift;
	my $size;

	if (-b $path || -c $path) {
		if (open TEST, "<", $path) {
			seek TEST, 0, 2;
			$size = tell TEST;
			close TEST;
		}
	} else {
		$size = -s $path;
	}

	return $size;
}

package Line;
# A single line with optional and required segments to render
sub new {
	my $class = shift;
	bless { 'segments' => [], 'widths' => {} }, $class
}

# Add a string to the line  with a given priority
# 0 is always rendered, >1 are only rendered if there is space, higher values
# dropped first
# A sub may be added which will receive the remaining width as an argument.
# This should be given a minimum acceptable width as the fourth argument
sub add {
	my $self = shift;
	my $priority = shift;
	my $content = shift;
	my $width = shift || length($content);

	$self->{'widths'}{$priority} += $width;
	push(@{$self->{'segments'}}, [$priority, $content]);
}

# Render the bar and reset ready for the next line
sub render {
	my $self = shift;
	my $max_width = shift;

	my $widths = $self->{'widths'};

	my $width = 0;
	my $priority_limit = 0;
	for my $pri (sort keys %{$widths}) {
		my $pri_width = $widths->{$pri};
		if ($width + $pri_width >= $max_width) {
			$priority_limit = $pri - 1;
			last;
		}
		$priority_limit = $pri;
		$width += $pri_width;
	}

	$priority_limit = 0 if $priority_limit < 0;

	my $remaining_width = $max_width - $width;
	my $ret = '';

	for my $segment (@{$self->{'segments'}}) {
		my ($priority, $content) = @{$segment};
		if ($priority <= $priority_limit) {
			if (ref $content eq 'CODE') {
				$ret .= &$content($remaining_width);
			} else {
				$ret .= $content;
			}
		}
	}

	$self->{'segments'} = [];
	$self->{'widths'} = {};

	$ret;
}

package Output;

sub printable_seconds {
	my $seconds = shift;
	my $printable_seconds;

	my $days = 0;
	my $hours = 0;
	my $minutes = 0;

	if ($seconds >= 60*60*24) {
		$days = sprintf("%d",$seconds/60/60/24);
		$seconds = $seconds - $days*60*60*24;
	}

	if ($seconds >= 60*60) {
		$hours = sprintf("%d",($seconds/60/60));
		$seconds = $seconds - $hours*60*60;
	}

	if ($seconds >=60) {
		$minutes = sprintf("%d",($seconds/60));
		$seconds = $seconds - $minutes*60;
	}

	$hours = sprintf("%02d",$hours);
	$minutes = sprintf("%02d",$minutes);
	$seconds = sprintf("%02d",$seconds);

	$printable_seconds = "$hours:$minutes:$seconds";
	if ($days) { $printable_seconds = "$days days, $printable_seconds"; }

	return $printable_seconds;
}

# ZFS-style number formatting
# Takes a byte size and a character length to fit the formatted value within
sub printable_bytes {
	my $num = shift;
	my $length = shift || 5;

	$num = 0 unless defined($num);

	my @size_prefix = ('B', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y');
	my @formats = ('%*.2f%s', '%*.1f%s', '%*.0f%s');
	my $divisor = 1024;

	my $n = $num;
	my $index = 0;
	while ($n >= $divisor && $index <= ($#size_prefix - 1)) {
		$n /= $divisor;
		$index++;
	}

	my $u = $size_prefix[$index];

	if ($index == 0 || $num % ($divisor ** $index) == 0) {
		return sprintf("%*d%s", $length - 1, $n, $u);
	}

	my $ret;
	foreach my $fmt (@formats) {
		$ret = sprintf($fmt, $length - 1, $n, $u);
		if (length($ret) <= $length) {
			return $ret;
		}
	}
	return $ret;
}

sub render_eta {
	my $total_size = shift;
	my $remaining_data = $total_size - shift;
	my $transfer_rate = shift;

	my $eta = '';

	$remaining_data = 0 if $remaining_data < 0;

	if ($total_size) {
		if ($remaining_data && $transfer_rate) {
			$eta = printable_seconds($remaining_data / $transfer_rate);
		} elsif (!$transfer_rate) {
			$eta = '??:??:??';
		} else {
			$eta = '00:00:00';
		}
	}

	$eta
}

sub progress_bar {
	my $width = shift;
	my $chars = shift;
	my $pos = shift;

	return '' if ($width < 1);
	$pos = 1.0 if $pos > 1;

	my $bgch = substr($chars, 0, 1);
	my $fillch = substr($chars, -1, 1);
	my $intermediates = substr($chars, 1, -1);
	my $steps = (length($chars) - 2) * $width;
	$steps ||= $width;

	my $fill = int($width * $pos);
	my $bar = $fillch x $fill;

	if ($intermediates && $fill < $width) {
		$bar .= substr($intermediates, ($steps * $pos) % length($intermediates), 1);
	}

	$bar . ($bgch x ($width - length($bar)))
}

sub new {
	my $class = shift;
	my $progress_chars = shift || "  ▁▂▃▄▅▆▇█";
	my @spinner_states = shift || ("[ ●   ]", "[  ●  ]", "[   ● ]", "[    ●]", "[   ● ]", "[  ●  ]", "[ ●   ]", "[●    ]");

	bless {
		'last_lines' => 0,
		'iteration' => 0,
		'progress_chars' => $progress_chars,
		'spinner_states' => \@spinner_states,
		'iteration' => 0, }, $class
}

sub print_progress {
	my $self = shift;
	my $stats = shift;

	my $iteration = $self->{'iteration'}++;

	# find terminal length, extrapolate bar length
	my ($wchar, $hcar, $wpixels, $hpixels) = Term::ReadKey::GetTerminalSize();
	# no more ridiculously over-long meters please
	if ($wchar > 80) { $wchar = 80; }

	# Move the cursor above our previous bars
	print STDERR ($cursorup x $self->{'last_lines'}) if $self->{'last_lines'} > 0;
	$self->{'last_lines'} = 0;

	my $line = Line->new();

	$line->add(0, sprintf('%s%s %s [',
		                  $stats->total_files() > 1 ? 'CUR ' : '',
		                  printable_bytes($stats->current_bytes_done()),
		                  printable_seconds($stats->current_time_elapsed())));

	if ($stats->total_files() > 1) {
		$line->add(0, sprintf('CUR %s/s',
			                  printable_bytes($stats->{'throughput_instant'})));
	} else {
		$line->add(0, sprintf('AVG %s/s',
			                  printable_bytes($stats->{'throughput_average'})));
		$line->add(1, sprintf(' CUR %s/s',
			                  printable_bytes($stats->{'throughput_instant'})));
	}

	$line->add(0, ']');

	if ($stats->current_bytes()) {
		my $fraction_done = $stats->current_bytes_done() / $stats->current_bytes();
		$fraction_done = 1.0 if $fraction_done > 1;

		$line->add(4, ' [');
		$line->add(4, sub { progress_bar($_[0], $self->{'progress_chars'}, $fraction_done) }, 1);
		$line->add(4, ']');
		$line->add(3, sprintf(" %3d%%", $fraction_done * 100));

		my $eta = render_eta($stats->current_bytes(), $stats->current_bytes_done(), $stats->{'throughput_smooth'});
		$line->add(2, " ETA $eta") if $eta;
	} else {
		$line->add(2, ' ' . $self->{'spinner_states'}[$iteration % (scalar(@{$self->{'spinner_states'}}))]);
	}

	$self->{'last_lines'}++;
	print STDERR $line->render($wchar) . "$cleartoend\n";

	return unless $stats->total_files() > 1;

	$line->add(0, sprintf('TOT %s %s [AVG %s/s]',
	                      printable_bytes($stats->total_bytes_done()),
	                      printable_seconds($stats->total_time_elapsed()),
	                      printable_bytes($stats->total_bytes_done() / $stats->total_time_elapsed())));

	if ($stats->total_bytes()) {
		my $fraction_done = $stats->total_bytes_done() / $stats->total_bytes();
		$fraction_done = 1.0 if $fraction_done > 1;

		$line->add(4, ' [');
		$line->add(4, sub { progress_bar($_[0], $self->{'progress_chars'}, $fraction_done) }, 1);
		$line->add(4, ']');
		$line->add(3, sprintf(" %3d%%", $fraction_done * 100));

		my $eta = render_eta($stats->total_bytes(), $stats->total_bytes_done(), $stats->{'throughput_smooth'});
		$line->add(2, " ETA $eta") if $eta;
	} else {
		my $fraction_done = $stats->done_files() / $stats->total_files();
		$line->add(4, ' [');
		$line->add(4, sub { progress_bar($_[0], $self->{'progress_chars'}, $fraction_done) }, 1);
		$line->add(4, ']');
		$line->add(3, sprintf(" %d of %d", $stats->done_files() + 1, $stats->total_files()));
	}

	$self->{'last_lines'}++;
	print STDERR $line->render($wchar) . "$cleartoend\n";
}

package Progress;
# Statistics gathering for file writing
sub new {
	my $class = shift;
	my $now = shift || main::monotime();
	bless {
		'time_start' => $now,
		'time_prev' => $now,
		'done' => [],
		'pending' => [],
		'current' => undef,
		'size' => 0,
		'bytes_done' => 0,
		'throughput_average' => undef,
		'throughput_smooth' => undef,
		'throughput_instant' => undef,
	}, $class

}

sub done_files {
	my $self = shift;

	scalar @{$self->{'done'}}
}

sub pending_files {
	my $self = shift;

	scalar @{$self->{'pending'}}
}

sub total_files {
	my $self = shift;

	$self->done_files() + $self->pending_files() + ($self->{'current'} ? 1 : 0)
}

sub current_time_elapsed {
	my $self = shift;

	$self->{'time_prev'} - $self->{'current'}->{'time_start'}
}

sub current_bytes_done {
	my $self = shift;

	$self->{'current'}->{'bytes_done'}
}

sub current_bytes {
	my $self = shift;

	$self->{'current'}->{'size'}
}

sub total_time_elapsed {
	my $self = shift;

	$self->{'time_prev'} - $self->{'time_start'}
}

sub total_bytes_done {
	my $self = shift;

	$self->{'bytes_done'}
}

sub total_bytes {
	my $self = shift;

	$self->{'size'}
}

sub add_file {
	my $self = shift;
	my $size = shift;

	if (defined($size) && defined($self->{'size'})) {
		$self->{'size'} += $size;
	} else {
		$self->{'size'} = undef;
	}

	push(@{$self->{'pending'}}, { 'size' => $size, 'time_start' => undef, 'bytes_done' => 0 });
}

# Move to the next file, return falsey if we're done
sub next_file {
	my $self = shift;
	my $now = shift || main::monotime();

	unless (defined($self->{'time_start'})) {
		$self->{'time_start'} = $now;
	}

	push(@{$self->{'done'}}, $self->{'current'}) if $self->{'current'};

	my $current = shift(@{$self->{'pending'}});
	$current->{'time_start'} = $now;
	$self->{'current'} = $current;
	$current
}

sub update_stats {
	my $self = shift;
	my $bytes_new = shift;
	my $now = shift || main::monotime();

	die "No active file" unless $self->{'current'};

	$self->{'current'}->{'bytes_done'} += $bytes_new;
	my $bytes_done = ($self->{'bytes_done'} += $bytes_new);
	my $elapsed = $now - $self->{'time_prev'};
	my $total_elapsed = $now - $self->{'time_start'};
	$self->{'time_prev'} = $now;

	if ($bytes_new > 0 && $elapsed > 0) {
		$self->{'throughput_instant'} = $bytes_new / $elapsed;
		$self->{'throughput_average'} = $bytes_done / $total_elapsed;

		if (defined($self->{'throughput_smooth'})) {
			# Basic exponential smoothing
			# Set smoothing lower to weigh more recent values higher
			my $smoothing = 0.8;
			$self->{'throughput_smooth'} = ($smoothing * $self->{'throughput_smooth'}) +
				((1 - $smoothing) * $self->{'throughput_instant'});
		} else {
			# Set to the best value we have
			$self->{'throughput_smooth'} = $self->{'throughput_average'};
		}
	}
}
